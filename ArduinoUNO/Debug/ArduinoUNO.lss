
ArduinoUNO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000cc4  00000d58  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001be  0080012c  0080012c  00000d84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000799b  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000178f  00000000  00000000  00008ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001667  00000000  00000000  0000a276  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000adc  00000000  00000000  0000b8e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001e20  00000000  00000000  0000c3bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b5a  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003b8  00000000  00000000  00011d36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__ctors_end>
   4:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_1>
   8:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_2>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__vector_7>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_13>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 8a 04 	jmp	0x914	; 0x914 <__vector_16>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 c2 01 	jmp	0x384	; 0x384 <__vector_18>
  4c:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
  69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
  7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
  91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
  a5:	00 00 00 00 25 00 28 00 2b 00 00                    ....%.(.+..

000000b0 <__ctors_start>:
  b0:	2d 02       	muls	r18, r29
  b2:	b6 02       	muls	r27, r22
  b4:	f8 05       	cpc	r31, r8

000000b6 <__ctors_end>:
  b6:	11 24       	eor	r1, r1
  b8:	1f be       	out	0x3f, r1	; 63
  ba:	cf ef       	ldi	r28, 0xFF	; 255
  bc:	d8 e0       	ldi	r29, 0x08	; 8
  be:	de bf       	out	0x3e, r29	; 62
  c0:	cd bf       	out	0x3d, r28	; 61

000000c2 <__do_copy_data>:
  c2:	11 e0       	ldi	r17, 0x01	; 1
  c4:	a0 e0       	ldi	r26, 0x00	; 0
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	e4 ec       	ldi	r30, 0xC4	; 196
  ca:	fc e0       	ldi	r31, 0x0C	; 12
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
  ce:	05 90       	lpm	r0, Z+
  d0:	0d 92       	st	X+, r0
  d2:	ac 32       	cpi	r26, 0x2C	; 44
  d4:	b1 07       	cpc	r27, r17
  d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_clear_bss>:
  d8:	22 e0       	ldi	r18, 0x02	; 2
  da:	ac e2       	ldi	r26, 0x2C	; 44
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	01 c0       	rjmp	.+2      	; 0xe2 <.do_clear_bss_start>

000000e0 <.do_clear_bss_loop>:
  e0:	1d 92       	st	X+, r1

000000e2 <.do_clear_bss_start>:
  e2:	aa 3e       	cpi	r26, 0xEA	; 234
  e4:	b2 07       	cpc	r27, r18
  e6:	e1 f7       	brne	.-8      	; 0xe0 <.do_clear_bss_loop>

000000e8 <__do_global_ctors>:
  e8:	10 e0       	ldi	r17, 0x00	; 0
  ea:	c6 eb       	ldi	r28, 0xB6	; 182
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <__do_global_ctors+0x10>
  f0:	22 97       	sbiw	r28, 0x02	; 2
  f2:	fe 01       	movw	r30, r28
  f4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <__tablejump__>
  f8:	c0 3b       	cpi	r28, 0xB0	; 176
  fa:	d1 07       	cpc	r29, r17
  fc:	c9 f7       	brne	.-14     	; 0xf0 <__do_global_ctors+0x8>
  fe:	0e 94 c2 02 	call	0x584	; 0x584 <main>
 102:	0c 94 60 06 	jmp	0xcc0	; 0xcc0 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 10a:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 10c:	81 8d       	ldd	r24, Z+25	; 0x19
 10e:	22 8d       	ldd	r18, Z+26	; 0x1a
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	80 5c       	subi	r24, 0xC0	; 192
 114:	9f 4f       	sbci	r25, 0xFF	; 255
 116:	82 1b       	sub	r24, r18
 118:	91 09       	sbc	r25, r1
}
 11a:	8f 73       	andi	r24, 0x3F	; 63
 11c:	99 27       	eor	r25, r25
 11e:	08 95       	ret

00000120 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 120:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 122:	91 8d       	ldd	r25, Z+25	; 0x19
 124:	82 8d       	ldd	r24, Z+26	; 0x1a
 126:	98 17       	cp	r25, r24
 128:	31 f0       	breq	.+12     	; 0x136 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 12a:	82 8d       	ldd	r24, Z+26	; 0x1a
 12c:	e8 0f       	add	r30, r24
 12e:	f1 1d       	adc	r31, r1
 130:	85 8d       	ldd	r24, Z+29	; 0x1d
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 13a:	08 95       	ret

0000013c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 13c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 13e:	91 8d       	ldd	r25, Z+25	; 0x19
 140:	82 8d       	ldd	r24, Z+26	; 0x1a
 142:	98 17       	cp	r25, r24
 144:	61 f0       	breq	.+24     	; 0x15e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 146:	82 8d       	ldd	r24, Z+26	; 0x1a
 148:	df 01       	movw	r26, r30
 14a:	a8 0f       	add	r26, r24
 14c:	b1 1d       	adc	r27, r1
 14e:	5d 96       	adiw	r26, 0x1d	; 29
 150:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 152:	92 8d       	ldd	r25, Z+26	; 0x1a
 154:	9f 5f       	subi	r25, 0xFF	; 255
 156:	9f 73       	andi	r25, 0x3F	; 63
 158:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 162:	08 95       	ret

00000164 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 164:	83 e2       	ldi	r24, 0x23	; 35
 166:	92 e0       	ldi	r25, 0x02	; 2
 168:	89 2b       	or	r24, r25
 16a:	49 f0       	breq	.+18     	; 0x17e <_Z14serialEventRunv+0x1a>
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	89 2b       	or	r24, r25
 172:	29 f0       	breq	.+10     	; 0x17e <_Z14serialEventRunv+0x1a>
 174:	0e 94 23 02 	call	0x446	; 0x446 <_Z17Serial0_availablev>
 178:	81 11       	cpse	r24, r1
 17a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 17e:	08 95       	ret

00000180 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 180:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 182:	84 8d       	ldd	r24, Z+28	; 0x1c
 184:	df 01       	movw	r26, r30
 186:	a8 0f       	add	r26, r24
 188:	b1 1d       	adc	r27, r1
 18a:	a3 5a       	subi	r26, 0xA3	; 163
 18c:	bf 4f       	sbci	r27, 0xFF	; 255
 18e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 190:	84 8d       	ldd	r24, Z+28	; 0x1c
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	01 96       	adiw	r24, 0x01	; 1
 196:	8f 73       	andi	r24, 0x3F	; 63
 198:	90 78       	andi	r25, 0x80	; 128
 19a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
 19c:	a6 89       	ldd	r26, Z+22	; 0x16
 19e:	b7 89       	ldd	r27, Z+23	; 0x17
 1a0:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 1a2:	a0 89       	ldd	r26, Z+16	; 0x10
 1a4:	b1 89       	ldd	r27, Z+17	; 0x11
 1a6:	8c 91       	ld	r24, X
 1a8:	80 64       	ori	r24, 0x40	; 64
 1aa:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 1ac:	93 8d       	ldd	r25, Z+27	; 0x1b
 1ae:	84 8d       	ldd	r24, Z+28	; 0x1c
 1b0:	98 13       	cpse	r25, r24
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1b4:	02 88       	ldd	r0, Z+18	; 0x12
 1b6:	f3 89       	ldd	r31, Z+19	; 0x13
 1b8:	e0 2d       	mov	r30, r0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 7d       	andi	r24, 0xDF	; 223
 1be:	80 83       	st	Z, r24
 1c0:	08 95       	ret

000001c2 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 1c8:	88 8d       	ldd	r24, Y+24	; 0x18
 1ca:	81 11       	cpse	r24, r1
 1cc:	0b c0       	rjmp	.+22     	; 0x1e4 <_ZN14HardwareSerial5flushEv+0x22>
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <_ZN14HardwareSerial5flushEv+0x44>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	07 fc       	sbrc	r0, 7
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <_ZN14HardwareSerial5flushEv+0x26>
 1d6:	80 81       	ld	r24, Z
 1d8:	85 ff       	sbrs	r24, 5
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <_ZN14HardwareSerial5flushEv+0x26>
 1dc:	0e c0       	rjmp	.+28     	; 0x1fa <_ZN14HardwareSerial5flushEv+0x38>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 1e4:	ea 89       	ldd	r30, Y+18	; 0x12
 1e6:	fb 89       	ldd	r31, Y+19	; 0x13
 1e8:	80 81       	ld	r24, Z
 1ea:	85 fd       	sbrc	r24, 5
 1ec:	f1 cf       	rjmp	.-30     	; 0x1d0 <_ZN14HardwareSerial5flushEv+0xe>
 1ee:	a8 89       	ldd	r26, Y+16	; 0x10
 1f0:	b9 89       	ldd	r27, Y+17	; 0x11
 1f2:	8c 91       	ld	r24, X
 1f4:	86 ff       	sbrs	r24, 6
 1f6:	ec cf       	rjmp	.-40     	; 0x1d0 <_ZN14HardwareSerial5flushEv+0xe>
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <_ZN14HardwareSerial5flushEv+0x44>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 1fa:	a8 89       	ldd	r26, Y+16	; 0x10
 1fc:	b9 89       	ldd	r27, Y+17	; 0x11
 1fe:	8c 91       	ld	r24, X
 200:	85 ff       	sbrs	r24, 5
 202:	f2 cf       	rjmp	.-28     	; 0x1e8 <_ZN14HardwareSerial5flushEv+0x26>
 204:	ec cf       	rjmp	.-40     	; 0x1de <_ZN14HardwareSerial5flushEv+0x1c>
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 20c:	0f 93       	push	r16
 20e:	1f 93       	push	r17
 210:	cf 93       	push	r28
 212:	df 93       	push	r29
 214:	ec 01       	movw	r28, r24
 216:	16 2f       	mov	r17, r22
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 218:	9b 8d       	ldd	r25, Y+27	; 0x1b
 21a:	8c 8d       	ldd	r24, Y+28	; 0x1c
 21c:	98 13       	cpse	r25, r24
 21e:	24 c0       	rjmp	.+72     	; 0x268 <_ZN14HardwareSerial5writeEh+0x5c>
 220:	e8 89       	ldd	r30, Y+16	; 0x10
 222:	f9 89       	ldd	r31, Y+17	; 0x11
 224:	80 81       	ld	r24, Z
 226:	85 fd       	sbrc	r24, 5
 228:	26 c0       	rjmp	.+76     	; 0x276 <_ZN14HardwareSerial5writeEh+0x6a>
 22a:	1e c0       	rjmp	.+60     	; 0x268 <_ZN14HardwareSerial5writeEh+0x5c>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	07 fc       	sbrc	r0, 7
 230:	08 c0       	rjmp	.+16     	; 0x242 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 232:	e8 89       	ldd	r30, Y+16	; 0x10
 234:	f9 89       	ldd	r31, Y+17	; 0x11
 236:	80 81       	ld	r24, Z
 238:	85 ff       	sbrs	r24, 5
 23a:	03 c0       	rjmp	.+6      	; 0x242 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
 23c:	ce 01       	movw	r24, r28
 23e:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 242:	9c 8d       	ldd	r25, Y+28	; 0x1c
 244:	09 17       	cp	r16, r25
 246:	91 f3       	breq	.-28     	; 0x22c <_ZN14HardwareSerial5writeEh+0x20>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 248:	8b 8d       	ldd	r24, Y+27	; 0x1b
 24a:	fe 01       	movw	r30, r28
 24c:	e8 0f       	add	r30, r24
 24e:	f1 1d       	adc	r31, r1
 250:	e3 5a       	subi	r30, 0xA3	; 163
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	10 83       	st	Z, r17
  _tx_buffer_head = i;
 256:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 258:	ea 89       	ldd	r30, Y+18	; 0x12
 25a:	fb 89       	ldd	r31, Y+19	; 0x13
 25c:	80 81       	ld	r24, Z
 25e:	80 62       	ori	r24, 0x20	; 32
 260:	80 83       	st	Z, r24
  _written = true;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	88 8f       	std	Y+24, r24	; 0x18
  
  return 1;
 266:	0f c0       	rjmp	.+30     	; 0x286 <_ZN14HardwareSerial5writeEh+0x7a>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 268:	8b 8d       	ldd	r24, Y+27	; 0x1b
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	8f 73       	andi	r24, 0x3F	; 63
 270:	90 78       	andi	r25, 0x80	; 128
 272:	08 2f       	mov	r16, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 274:	e6 cf       	rjmp	.-52     	; 0x242 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 276:	ee 89       	ldd	r30, Y+22	; 0x16
 278:	ff 89       	ldd	r31, Y+23	; 0x17
 27a:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
 27c:	e8 89       	ldd	r30, Y+16	; 0x10
 27e:	f9 89       	ldd	r31, Y+17	; 0x11
 280:	80 81       	ld	r24, Z
 282:	80 64       	ori	r24, 0x40	; 64
 284:	80 83       	st	Z, r24
	
  sbi(*_ucsrb, UDRIE0);
  _written = true;
  
  return 1;
}
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	0f 91       	pop	r16
 292:	08 95       	ret

00000294 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 294:	cf 92       	push	r12
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	ec 01       	movw	r28, r24
 2a4:	6a 01       	movw	r12, r20
 2a6:	7b 01       	movw	r14, r22
 2a8:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 2aa:	e8 89       	ldd	r30, Y+16	; 0x10
 2ac:	f9 89       	ldd	r31, Y+17	; 0x11
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2b2:	41 15       	cp	r20, r1
 2b4:	81 ee       	ldi	r24, 0xE1	; 225
 2b6:	58 07       	cpc	r21, r24
 2b8:	61 05       	cpc	r22, r1
 2ba:	71 05       	cpc	r23, r1
 2bc:	b1 f0       	breq	.+44     	; 0x2ea <_ZN14HardwareSerial5beginEmh+0x56>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	79 e0       	ldi	r23, 0x09	; 9
 2c2:	8d e3       	ldi	r24, 0x3D	; 61
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	a7 01       	movw	r20, r14
 2c8:	96 01       	movw	r18, r12
 2ca:	0e 94 38 06 	call	0xc70	; 0xc70 <__udivmodsi4>
 2ce:	ba 01       	movw	r22, r20
 2d0:	a9 01       	movw	r20, r18
 2d2:	41 50       	subi	r20, 0x01	; 1
 2d4:	51 09       	sbc	r21, r1
 2d6:	61 09       	sbc	r22, r1
 2d8:	71 09       	sbc	r23, r1
 2da:	76 95       	lsr	r23
 2dc:	67 95       	ror	r22
 2de:	57 95       	ror	r21
 2e0:	47 95       	ror	r20
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 2e2:	41 15       	cp	r20, r1
 2e4:	80 e1       	ldi	r24, 0x10	; 16
 2e6:	58 07       	cpc	r21, r24
 2e8:	a8 f0       	brcs	.+42     	; 0x314 <_ZN14HardwareSerial5beginEmh+0x80>
  {
    *_ucsra = 0;
 2ea:	e8 89       	ldd	r30, Y+16	; 0x10
 2ec:	f9 89       	ldd	r31, Y+17	; 0x11
 2ee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 2f0:	60 e8       	ldi	r22, 0x80	; 128
 2f2:	74 e8       	ldi	r23, 0x84	; 132
 2f4:	8e e1       	ldi	r24, 0x1E	; 30
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	a7 01       	movw	r20, r14
 2fa:	96 01       	movw	r18, r12
 2fc:	0e 94 38 06 	call	0xc70	; 0xc70 <__udivmodsi4>
 300:	ba 01       	movw	r22, r20
 302:	a9 01       	movw	r20, r18
 304:	41 50       	subi	r20, 0x01	; 1
 306:	51 09       	sbc	r21, r1
 308:	61 09       	sbc	r22, r1
 30a:	71 09       	sbc	r23, r1
 30c:	76 95       	lsr	r23
 30e:	67 95       	ror	r22
 310:	57 95       	ror	r21
 312:	47 95       	ror	r20
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 314:	ec 85       	ldd	r30, Y+12	; 0x0c
 316:	fd 85       	ldd	r31, Y+13	; 0x0d
 318:	50 83       	st	Z, r21
  *_ubrrl = baud_setting;
 31a:	ee 85       	ldd	r30, Y+14	; 0x0e
 31c:	ff 85       	ldd	r31, Y+15	; 0x0f
 31e:	40 83       	st	Z, r20

  _written = false;
 320:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 322:	ec 89       	ldd	r30, Y+20	; 0x14
 324:	fd 89       	ldd	r31, Y+21	; 0x15
 326:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
 328:	ea 89       	ldd	r30, Y+18	; 0x12
 32a:	fb 89       	ldd	r31, Y+19	; 0x13
 32c:	80 81       	ld	r24, Z
 32e:	80 61       	ori	r24, 0x10	; 16
 330:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 332:	ea 89       	ldd	r30, Y+18	; 0x12
 334:	fb 89       	ldd	r31, Y+19	; 0x13
 336:	80 81       	ld	r24, Z
 338:	88 60       	ori	r24, 0x08	; 8
 33a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 33c:	ea 89       	ldd	r30, Y+18	; 0x12
 33e:	fb 89       	ldd	r31, Y+19	; 0x13
 340:	80 81       	ld	r24, Z
 342:	80 68       	ori	r24, 0x80	; 128
 344:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 346:	ea 89       	ldd	r30, Y+18	; 0x12
 348:	fb 89       	ldd	r31, Y+19	; 0x13
 34a:	80 81       	ld	r24, Z
 34c:	8f 7d       	andi	r24, 0xDF	; 223
 34e:	80 83       	st	Z, r24
}
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	ff 90       	pop	r15
 358:	ef 90       	pop	r14
 35a:	df 90       	pop	r13
 35c:	cf 90       	pop	r12
 35e:	08 95       	ret

00000360 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 360:	fc 01       	movw	r30, r24
 362:	23 8d       	ldd	r18, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
 364:	34 8d       	ldd	r19, Z+28	; 0x1c
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 366:	23 17       	cp	r18, r19
 368:	38 f0       	brcs	.+14     	; 0x378 <_ZN14HardwareSerial17availableForWriteEv+0x18>
 36a:	8f e3       	ldi	r24, 0x3F	; 63
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	82 1b       	sub	r24, r18
 370:	91 09       	sbc	r25, r1
 372:	83 0f       	add	r24, r19
 374:	91 1d       	adc	r25, r1
 376:	08 95       	ret
  return tail - head - 1;
 378:	83 2f       	mov	r24, r19
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	82 1b       	sub	r24, r18
 37e:	91 09       	sbc	r25, r1
 380:	01 97       	sbiw	r24, 0x01	; 1
}
 382:	08 95       	ret

00000384 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	2f 93       	push	r18
 390:	8f 93       	push	r24
 392:	9f 93       	push	r25
 394:	af 93       	push	r26
 396:	bf 93       	push	r27
 398:	ef 93       	push	r30
 39a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 39c:	e0 91 3c 01 	lds	r30, 0x013C
 3a0:	f0 91 3d 01 	lds	r31, 0x013D
 3a4:	80 81       	ld	r24, Z
 3a6:	82 fd       	sbrc	r24, 2
 3a8:	17 c0       	rjmp	.+46     	; 0x3d8 <__vector_18+0x54>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 3aa:	e0 91 42 01 	lds	r30, 0x0142
 3ae:	f0 91 43 01 	lds	r31, 0x0143
 3b2:	20 81       	ld	r18, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 3b4:	80 91 45 01 	lds	r24, 0x0145
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 3bc:	90 91 46 01 	lds	r25, 0x0146
 3c0:	89 17       	cp	r24, r25
 3c2:	79 f0       	breq	.+30     	; 0x3e2 <__vector_18+0x5e>
      _rx_buffer[_rx_buffer_head] = c;
 3c4:	e5 e4       	ldi	r30, 0x45	; 69
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	a0 81       	ld	r26, Z
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	a4 5d       	subi	r26, 0xD4	; 212
 3ce:	be 4f       	sbci	r27, 0xFE	; 254
 3d0:	5d 96       	adiw	r26, 0x1d	; 29
 3d2:	2c 93       	st	X, r18
      _rx_buffer_head = i;
 3d4:	80 83       	st	Z, r24
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <__vector_18+0x5e>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 3d8:	e0 91 42 01 	lds	r30, 0x0142
 3dc:	f0 91 43 01 	lds	r31, 0x0143
 3e0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 3e2:	ff 91       	pop	r31
 3e4:	ef 91       	pop	r30
 3e6:	bf 91       	pop	r27
 3e8:	af 91       	pop	r26
 3ea:	9f 91       	pop	r25
 3ec:	8f 91       	pop	r24
 3ee:	2f 91       	pop	r18
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti

000003fa <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 3fa:	1f 92       	push	r1
 3fc:	0f 92       	push	r0
 3fe:	0f b6       	in	r0, 0x3f	; 63
 400:	0f 92       	push	r0
 402:	11 24       	eor	r1, r1
 404:	2f 93       	push	r18
 406:	3f 93       	push	r19
 408:	4f 93       	push	r20
 40a:	5f 93       	push	r21
 40c:	6f 93       	push	r22
 40e:	7f 93       	push	r23
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
 414:	af 93       	push	r26
 416:	bf 93       	push	r27
 418:	ef 93       	push	r30
 41a:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 41c:	8c e2       	ldi	r24, 0x2C	; 44
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 c0 00 	call	0x180	; 0x180 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 424:	ff 91       	pop	r31
 426:	ef 91       	pop	r30
 428:	bf 91       	pop	r27
 42a:	af 91       	pop	r26
 42c:	9f 91       	pop	r25
 42e:	8f 91       	pop	r24
 430:	7f 91       	pop	r23
 432:	6f 91       	pop	r22
 434:	5f 91       	pop	r21
 436:	4f 91       	pop	r20
 438:	3f 91       	pop	r19
 43a:	2f 91       	pop	r18
 43c:	0f 90       	pop	r0
 43e:	0f be       	out	0x3f, r0	; 63
 440:	0f 90       	pop	r0
 442:	1f 90       	pop	r1
 444:	18 95       	reti

00000446 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 446:	8c e2       	ldi	r24, 0x2C	; 44
 448:	91 e0       	ldi	r25, 0x01	; 1
 44a:	0e 94 85 00 	call	0x10a	; 0x10a <_ZN14HardwareSerial9availableEv>
 44e:	21 e0       	ldi	r18, 0x01	; 1
 450:	89 2b       	or	r24, r25
 452:	09 f4       	brne	.+2      	; 0x456 <_Z17Serial0_availablev+0x10>
 454:	20 e0       	ldi	r18, 0x00	; 0
}
 456:	82 2f       	mov	r24, r18
 458:	08 95       	ret

0000045a <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 45a:	10 92 2f 01 	sts	0x012F, r1
 45e:	10 92 2e 01 	sts	0x012E, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 462:	88 ee       	ldi	r24, 0xE8	; 232
 464:	93 e0       	ldi	r25, 0x03	; 3
 466:	a0 e0       	ldi	r26, 0x00	; 0
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	80 93 30 01 	sts	0x0130, r24
 46e:	90 93 31 01 	sts	0x0131, r25
 472:	a0 93 32 01 	sts	0x0132, r26
 476:	b0 93 33 01 	sts	0x0133, r27
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 47a:	89 e1       	ldi	r24, 0x19	; 25
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	90 93 2d 01 	sts	0x012D, r25
 482:	80 93 2c 01 	sts	0x012C, r24
 486:	85 ec       	ldi	r24, 0xC5	; 197
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	90 93 39 01 	sts	0x0139, r25
 48e:	80 93 38 01 	sts	0x0138, r24
 492:	84 ec       	ldi	r24, 0xC4	; 196
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	90 93 3b 01 	sts	0x013B, r25
 49a:	80 93 3a 01 	sts	0x013A, r24
 49e:	80 ec       	ldi	r24, 0xC0	; 192
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	90 93 3d 01 	sts	0x013D, r25
 4a6:	80 93 3c 01 	sts	0x013C, r24
 4aa:	81 ec       	ldi	r24, 0xC1	; 193
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	90 93 3f 01 	sts	0x013F, r25
 4b2:	80 93 3e 01 	sts	0x013E, r24
 4b6:	82 ec       	ldi	r24, 0xC2	; 194
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	90 93 41 01 	sts	0x0141, r25
 4be:	80 93 40 01 	sts	0x0140, r24
 4c2:	86 ec       	ldi	r24, 0xC6	; 198
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 43 01 	sts	0x0143, r25
 4ca:	80 93 42 01 	sts	0x0142, r24
 4ce:	10 92 45 01 	sts	0x0145, r1
 4d2:	10 92 46 01 	sts	0x0146, r1
 4d6:	10 92 47 01 	sts	0x0147, r1
 4da:	10 92 48 01 	sts	0x0148, r1
 4de:	08 95       	ret

000004e0 <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
 4e0:	af 92       	push	r10
 4e2:	bf 92       	push	r11
 4e4:	cf 92       	push	r12
 4e6:	df 92       	push	r13
 4e8:	ef 92       	push	r14
 4ea:	ff 92       	push	r15
 4ec:	0f 93       	push	r16
 4ee:	1f 93       	push	r17
 4f0:	cf 93       	push	r28
 4f2:	df 93       	push	r29
 4f4:	5c 01       	movw	r10, r24
 4f6:	7b 01       	movw	r14, r22
    size_t n = 0;
    for (int i =0; i < 3; i++)
 4f8:	c0 e0       	ldi	r28, 0x00	; 0
 4fa:	d0 e0       	ldi	r29, 0x00	; 0
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
 4fc:	00 e0       	ldi	r16, 0x00	; 0
 4fe:	10 e0       	ldi	r17, 0x00	; 0
 500:	f5 01       	movw	r30, r10
 502:	ec 0f       	add	r30, r28
 504:	fd 1f       	adc	r31, r29
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
 506:	4a e0       	ldi	r20, 0x0A	; 10
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	62 81       	ldd	r22, Z+2	; 0x02
 50c:	c7 01       	movw	r24, r14
 50e:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEhi>
 512:	6c 01       	movw	r12, r24
        n += p.print('.');
 514:	6e e2       	ldi	r22, 0x2E	; 46
 516:	c7 01       	movw	r24, r14
 518:	0e 94 04 03 	call	0x608	; 0x608 <_ZN5Print5printEc>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
 51c:	8c 0d       	add	r24, r12
 51e:	9d 1d       	adc	r25, r13
        n += p.print('.');
 520:	08 0f       	add	r16, r24
 522:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
 524:	21 96       	adiw	r28, 0x01	; 1
 526:	c3 30       	cpi	r28, 0x03	; 3
 528:	d1 05       	cpc	r29, r1
 52a:	51 f7       	brne	.-44     	; 0x500 <_ZNK9IPAddress7printToER5Print+0x20>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
 52c:	4a e0       	ldi	r20, 0x0A	; 10
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	f5 01       	movw	r30, r10
 532:	65 81       	ldd	r22, Z+5	; 0x05
 534:	c7 01       	movw	r24, r14
 536:	0e 94 96 03 	call	0x72c	; 0x72c <_ZN5Print5printEhi>
    return n;
}
 53a:	80 0f       	add	r24, r16
 53c:	91 1f       	adc	r25, r17
 53e:	df 91       	pop	r29
 540:	cf 91       	pop	r28
 542:	1f 91       	pop	r17
 544:	0f 91       	pop	r16
 546:	ff 90       	pop	r15
 548:	ef 90       	pop	r14
 54a:	df 90       	pop	r13
 54c:	cf 90       	pop	r12
 54e:	bf 90       	pop	r11
 550:	af 90       	pop	r10
 552:	08 95       	ret

00000554 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 554:	0f 93       	push	r16
 556:	fc 01       	movw	r30, r24
 558:	89 e2       	ldi	r24, 0x29	; 41
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	91 83       	std	Z+1, r25	; 0x01
 55e:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
 560:	62 83       	std	Z+2, r22	; 0x02
    _address.bytes[1] = second_octet;
 562:	43 83       	std	Z+3, r20	; 0x03
    _address.bytes[2] = third_octet;
 564:	24 83       	std	Z+4, r18	; 0x04
    _address.bytes[3] = fourth_octet;
 566:	05 83       	std	Z+5, r16	; 0x05
}
 568:	0f 91       	pop	r16
 56a:	08 95       	ret

0000056c <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
    return n;
}
 56c:	0f 93       	push	r16
    friend class Server;
    friend class DhcpClass;
    friend class DNSClient;
};

const IPAddress INADDR_NONE(0,0,0,0);
 56e:	00 e0       	ldi	r16, 0x00	; 0
 570:	20 e0       	ldi	r18, 0x00	; 0
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	60 e0       	ldi	r22, 0x00	; 0
 576:	89 ec       	ldi	r24, 0xC9	; 201
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 aa 02 	call	0x554	; 0x554 <_ZN9IPAddressC1Ehhhh>
 57e:	0f 91       	pop	r16
 580:	08 95       	ret

00000582 <initVariant>:
int atexit(void (*func)()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 582:	08 95       	ret

00000584 <main>:

int main(void)
{
	init();
 584:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <init>

	initVariant();
 588:	0e 94 c1 02 	call	0x582	; 0x582 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 58c:	0e 94 c2 05 	call	0xb84	; 0xb84 <setup>
    
	for (;;) {
		loop();
 590:	0e 94 73 05 	call	0xae6	; 0xae6 <loop>
		if (serialEventRun) serialEventRun();
 594:	82 eb       	ldi	r24, 0xB2	; 178
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	89 2b       	or	r24, r25
 59a:	29 f0       	breq	.+10     	; 0x5a6 <main+0x22>
 59c:	0e 94 b2 00 	call	0x164	; 0x164 <_Z14serialEventRunv>
#endif
	
	setup();
    
	for (;;) {
		loop();
 5a0:	0e 94 73 05 	call	0xae6	; 0xae6 <loop>
 5a4:	fb cf       	rjmp	.-10     	; 0x59c <main+0x18>
 5a6:	0e 94 73 05 	call	0xae6	; 0xae6 <loop>
 5aa:	fd cf       	rjmp	.-6      	; 0x5a6 <main+0x22>

000005ac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 5ac:	cf 92       	push	r12
 5ae:	df 92       	push	r13
 5b0:	ef 92       	push	r14
 5b2:	ff 92       	push	r15
 5b4:	0f 93       	push	r16
 5b6:	1f 93       	push	r17
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	6c 01       	movw	r12, r24
  size_t n = 0;
  while (size--) {
 5be:	41 15       	cp	r20, r1
 5c0:	51 05       	cpc	r21, r1
 5c2:	b1 f0       	breq	.+44     	; 0x5f0 <_ZN5Print5writeEPKhj+0x44>
 5c4:	06 2f       	mov	r16, r22
 5c6:	17 2f       	mov	r17, r23
 5c8:	ea 01       	movw	r28, r20
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
 5ca:	e1 2c       	mov	r14, r1
 5cc:	f1 2c       	mov	r15, r1
  while (size--) {
    n += write(*buffer++);
 5ce:	d8 01       	movw	r26, r16
 5d0:	6d 91       	ld	r22, X+
 5d2:	8d 01       	movw	r16, r26
 5d4:	d6 01       	movw	r26, r12
 5d6:	ed 91       	ld	r30, X+
 5d8:	fc 91       	ld	r31, X
 5da:	01 90       	ld	r0, Z+
 5dc:	f0 81       	ld	r31, Z
 5de:	e0 2d       	mov	r30, r0
 5e0:	c6 01       	movw	r24, r12
 5e2:	09 95       	icall
 5e4:	e8 0e       	add	r14, r24
 5e6:	f9 1e       	adc	r15, r25
 5e8:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 5ea:	20 97       	sbiw	r28, 0x00	; 0
 5ec:	81 f7       	brne	.-32     	; 0x5ce <_ZN5Print5writeEPKhj+0x22>
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <_ZN5Print5writeEPKhj+0x48>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
 5f0:	e1 2c       	mov	r14, r1
 5f2:	f1 2c       	mov	r15, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
 5f4:	c7 01       	movw	r24, r14
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	df 90       	pop	r13
 604:	cf 90       	pop	r12
 606:	08 95       	ret

00000608 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 608:	dc 01       	movw	r26, r24
 60a:	ed 91       	ld	r30, X+
 60c:	fc 91       	ld	r31, X
 60e:	01 90       	ld	r0, Z+
 610:	f0 81       	ld	r31, Z
 612:	e0 2d       	mov	r30, r0
 614:	09 95       	icall
}
 616:	08 95       	ret

00000618 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 618:	6f 92       	push	r6
 61a:	7f 92       	push	r7
 61c:	8f 92       	push	r8
 61e:	9f 92       	push	r9
 620:	af 92       	push	r10
 622:	bf 92       	push	r11
 624:	cf 92       	push	r12
 626:	df 92       	push	r13
 628:	ef 92       	push	r14
 62a:	ff 92       	push	r15
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	cd b7       	in	r28, 0x3d	; 61
 636:	de b7       	in	r29, 0x3e	; 62
 638:	a1 97       	sbiw	r28, 0x21	; 33
 63a:	0f b6       	in	r0, 0x3f	; 63
 63c:	f8 94       	cli
 63e:	de bf       	out	0x3e, r29	; 62
 640:	0f be       	out	0x3f, r0	; 63
 642:	cd bf       	out	0x3d, r28	; 61
 644:	6c 01       	movw	r12, r24
 646:	74 2e       	mov	r7, r20
 648:	35 2f       	mov	r19, r21
 64a:	86 2f       	mov	r24, r22
 64c:	97 2f       	mov	r25, r23
 64e:	62 2e       	mov	r6, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 650:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 652:	21 e0       	ldi	r18, 0x01	; 1
 654:	26 15       	cp	r18, r6
 656:	20 f0       	brcs	.+8      	; 0x660 <_ZN5Print11printNumberEmh+0x48>
 658:	0f 2e       	mov	r0, r31
 65a:	fa e0       	ldi	r31, 0x0A	; 10
 65c:	6f 2e       	mov	r6, r31
 65e:	f0 2d       	mov	r31, r0
 660:	7e 01       	movw	r14, r28
 662:	a1 e2       	ldi	r26, 0x21	; 33
 664:	ea 0e       	add	r14, r26
 666:	f1 1c       	adc	r15, r1

  do {
    unsigned long m = n;
    n /= base;
 668:	86 2c       	mov	r8, r6
 66a:	91 2c       	mov	r9, r1
 66c:	a1 2c       	mov	r10, r1
 66e:	b1 2c       	mov	r11, r1
 670:	67 2d       	mov	r22, r7
 672:	73 2f       	mov	r23, r19
 674:	a5 01       	movw	r20, r10
 676:	94 01       	movw	r18, r8
 678:	0e 94 38 06 	call	0xc70	; 0xc70 <__udivmodsi4>
 67c:	e2 2f       	mov	r30, r18
 67e:	73 2f       	mov	r23, r19
 680:	02 2f       	mov	r16, r18
 682:	13 2f       	mov	r17, r19
 684:	24 2f       	mov	r18, r20
 686:	35 2f       	mov	r19, r21
    char c = m - base * n;
 688:	f7 2d       	mov	r31, r7
 68a:	6e 9e       	mul	r6, r30
 68c:	f0 19       	sub	r31, r0
 68e:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 690:	b1 e0       	ldi	r27, 0x01	; 1
 692:	eb 1a       	sub	r14, r27
 694:	f1 08       	sbc	r15, r1
 696:	fa 30       	cpi	r31, 0x0A	; 10
 698:	10 f4       	brcc	.+4      	; 0x69e <_ZN5Print11printNumberEmh+0x86>
 69a:	f0 5d       	subi	r31, 0xD0	; 208
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <_ZN5Print11printNumberEmh+0x88>
 69e:	f9 5c       	subi	r31, 0xC9	; 201
 6a0:	d7 01       	movw	r26, r14
 6a2:	fc 93       	st	X, r31
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 6a4:	01 2b       	or	r16, r17
 6a6:	02 2b       	or	r16, r18
 6a8:	03 2b       	or	r16, r19
 6aa:	29 f0       	breq	.+10     	; 0x6b6 <_ZN5Print11printNumberEmh+0x9e>
    unsigned long m = n;
    n /= base;
 6ac:	7e 2e       	mov	r7, r30
 6ae:	37 2f       	mov	r19, r23
 6b0:	84 2f       	mov	r24, r20
 6b2:	95 2f       	mov	r25, r21
 6b4:	dd cf       	rjmp	.-70     	; 0x670 <_ZN5Print11printNumberEmh+0x58>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 6b6:	e1 14       	cp	r14, r1
 6b8:	f1 04       	cpc	r15, r1
 6ba:	91 f0       	breq	.+36     	; 0x6e0 <_ZN5Print11printNumberEmh+0xc8>
      return write((const uint8_t *)str, strlen(str));
 6bc:	f7 01       	movw	r30, r14
 6be:	01 90       	ld	r0, Z+
 6c0:	00 20       	and	r0, r0
 6c2:	e9 f7       	brne	.-6      	; 0x6be <_ZN5Print11printNumberEmh+0xa6>
 6c4:	31 97       	sbiw	r30, 0x01	; 1
 6c6:	af 01       	movw	r20, r30
 6c8:	4e 19       	sub	r20, r14
 6ca:	5f 09       	sbc	r21, r15
 6cc:	d6 01       	movw	r26, r12
 6ce:	ed 91       	ld	r30, X+
 6d0:	fc 91       	ld	r31, X
 6d2:	02 80       	ldd	r0, Z+2	; 0x02
 6d4:	f3 81       	ldd	r31, Z+3	; 0x03
 6d6:	e0 2d       	mov	r30, r0
 6d8:	b7 01       	movw	r22, r14
 6da:	c6 01       	movw	r24, r12
 6dc:	09 95       	icall
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_ZN5Print11printNumberEmh+0xcc>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 6e0:	80 e0       	ldi	r24, 0x00	; 0
 6e2:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
 6e4:	a1 96       	adiw	r28, 0x21	; 33
 6e6:	0f b6       	in	r0, 0x3f	; 63
 6e8:	f8 94       	cli
 6ea:	de bf       	out	0x3e, r29	; 62
 6ec:	0f be       	out	0x3f, r0	; 63
 6ee:	cd bf       	out	0x3d, r28	; 61
 6f0:	df 91       	pop	r29
 6f2:	cf 91       	pop	r28
 6f4:	1f 91       	pop	r17
 6f6:	0f 91       	pop	r16
 6f8:	ff 90       	pop	r15
 6fa:	ef 90       	pop	r14
 6fc:	df 90       	pop	r13
 6fe:	cf 90       	pop	r12
 700:	bf 90       	pop	r11
 702:	af 90       	pop	r10
 704:	9f 90       	pop	r9
 706:	8f 90       	pop	r8
 708:	7f 90       	pop	r7
 70a:	6f 90       	pop	r6
 70c:	08 95       	ret

0000070e <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 70e:	21 15       	cp	r18, r1
 710:	31 05       	cpc	r19, r1
 712:	49 f4       	brne	.+18     	; 0x726 <_ZN5Print5printEmi+0x18>
 714:	dc 01       	movw	r26, r24
 716:	ed 91       	ld	r30, X+
 718:	fc 91       	ld	r31, X
 71a:	01 90       	ld	r0, Z+
 71c:	f0 81       	ld	r31, Z
 71e:	e0 2d       	mov	r30, r0
 720:	64 2f       	mov	r22, r20
 722:	09 95       	icall
 724:	08 95       	ret
  else return printNumber(n, base);
 726:	0e 94 0c 03 	call	0x618	; 0x618 <_ZN5Print11printNumberEmh>
}
 72a:	08 95       	ret

0000072c <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
 72c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
 72e:	46 2f       	mov	r20, r22
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	0e 94 87 03 	call	0x70e	; 0x70e <_ZN5Print5printEmi>
}
 73a:	08 95       	ret

0000073c <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
 73c:	81 30       	cpi	r24, 0x01	; 1
 73e:	39 f0       	breq	.+14     	; 0x74e <_Z12disableTimerh+0x12>
 740:	18 f0       	brcs	.+6      	; 0x748 <_Z12disableTimerh+0xc>
 742:	82 30       	cpi	r24, 0x02	; 2
 744:	51 f0       	breq	.+20     	; 0x75a <_Z12disableTimerh+0x1e>
 746:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 748:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
 74c:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 74e:	ef e6       	ldi	r30, 0x6F	; 111
 750:	f0 e0       	ldi	r31, 0x00	; 0
 752:	80 81       	ld	r24, Z
 754:	8d 7f       	andi	r24, 0xFD	; 253
 756:	80 83       	st	Z, r24
      break;
 758:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 75a:	e0 e7       	ldi	r30, 0x70	; 112
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	80 81       	ld	r24, Z
 760:	8d 7f       	andi	r24, 0xFD	; 253
 762:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 76a:	e1 eb       	ldi	r30, 0xB1	; 177
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	80 81       	ld	r24, Z
 770:	88 7f       	andi	r24, 0xF8	; 248
 772:	84 60       	ori	r24, 0x04	; 4
 774:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 776:	10 92 b3 00 	sts	0x00B3, r1
 77a:	08 95       	ret

0000077c <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
 77c:	cf 93       	push	r28
 77e:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
 780:	80 91 00 01 	lds	r24, 0x0100
 784:	8c 13       	cpse	r24, r28
 786:	07 c0       	rjmp	.+14     	; 0x796 <_Z6noToneh+0x1a>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 788:	e8 e6       	ldi	r30, 0x68	; 104
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	84 91       	lpm	r24, Z
      tone_pins[i] = 255;
 78e:	9f ef       	ldi	r25, 0xFF	; 255
 790:	90 93 00 01 	sts	0x0100, r25
 794:	01 c0       	rjmp	.+2      	; 0x798 <_Z6noToneh+0x1c>
 796:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
 798:	0e 94 9e 03 	call	0x73c	; 0x73c <_Z12disableTimerh>

  digitalWrite(_pin, 0);
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	8c 2f       	mov	r24, r28
 7a0:	0e 94 3e 05 	call	0xa7c	; 0xa7c <digitalWrite>
}
 7a4:	cf 91       	pop	r28
 7a6:	08 95       	ret

000007a8 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
 7a8:	1f 92       	push	r1
 7aa:	0f 92       	push	r0
 7ac:	0f b6       	in	r0, 0x3f	; 63
 7ae:	0f 92       	push	r0
 7b0:	11 24       	eor	r1, r1
 7b2:	2f 93       	push	r18
 7b4:	3f 93       	push	r19
 7b6:	4f 93       	push	r20
 7b8:	5f 93       	push	r21
 7ba:	6f 93       	push	r22
 7bc:	7f 93       	push	r23
 7be:	8f 93       	push	r24
 7c0:	9f 93       	push	r25
 7c2:	af 93       	push	r26
 7c4:	bf 93       	push	r27
 7c6:	ef 93       	push	r30
 7c8:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
 7ca:	80 91 d2 01 	lds	r24, 0x01D2
 7ce:	90 91 d3 01 	lds	r25, 0x01D3
 7d2:	a0 91 d4 01 	lds	r26, 0x01D4
 7d6:	b0 91 d5 01 	lds	r27, 0x01D5
 7da:	89 2b       	or	r24, r25
 7dc:	8a 2b       	or	r24, r26
 7de:	8b 2b       	or	r24, r27
 7e0:	51 f1       	breq	.+84     	; 0x836 <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 7e2:	80 91 cf 01 	lds	r24, 0x01CF
 7e6:	e0 91 d0 01 	lds	r30, 0x01D0
 7ea:	f0 91 d1 01 	lds	r31, 0x01D1
 7ee:	90 81       	ld	r25, Z
 7f0:	89 27       	eor	r24, r25
 7f2:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
 7f4:	80 91 d2 01 	lds	r24, 0x01D2
 7f8:	90 91 d3 01 	lds	r25, 0x01D3
 7fc:	a0 91 d4 01 	lds	r26, 0x01D4
 800:	b0 91 d5 01 	lds	r27, 0x01D5
 804:	18 16       	cp	r1, r24
 806:	19 06       	cpc	r1, r25
 808:	1a 06       	cpc	r1, r26
 80a:	1b 06       	cpc	r1, r27
 80c:	c4 f4       	brge	.+48     	; 0x83e <__vector_7+0x96>
      timer2_toggle_count--;
 80e:	80 91 d2 01 	lds	r24, 0x01D2
 812:	90 91 d3 01 	lds	r25, 0x01D3
 816:	a0 91 d4 01 	lds	r26, 0x01D4
 81a:	b0 91 d5 01 	lds	r27, 0x01D5
 81e:	01 97       	sbiw	r24, 0x01	; 1
 820:	a1 09       	sbc	r26, r1
 822:	b1 09       	sbc	r27, r1
 824:	80 93 d2 01 	sts	0x01D2, r24
 828:	90 93 d3 01 	sts	0x01D3, r25
 82c:	a0 93 d4 01 	sts	0x01D4, r26
 830:	b0 93 d5 01 	sts	0x01D5, r27
 834:	04 c0       	rjmp	.+8      	; 0x83e <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 836:	80 91 00 01 	lds	r24, 0x0100
 83a:	0e 94 be 03 	call	0x77c	; 0x77c <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 83e:	ff 91       	pop	r31
 840:	ef 91       	pop	r30
 842:	bf 91       	pop	r27
 844:	af 91       	pop	r26
 846:	9f 91       	pop	r25
 848:	8f 91       	pop	r24
 84a:	7f 91       	pop	r23
 84c:	6f 91       	pop	r22
 84e:	5f 91       	pop	r21
 850:	4f 91       	pop	r20
 852:	3f 91       	pop	r19
 854:	2f 91       	pop	r18
 856:	0f 90       	pop	r0
 858:	0f be       	out	0x3f, r0	; 63
 85a:	0f 90       	pop	r0
 85c:	1f 90       	pop	r1
 85e:	18 95       	reti

00000860 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
 860:	1f 92       	push	r1
 862:	0f 92       	push	r0
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	0f 92       	push	r0
 868:	11 24       	eor	r1, r1
 86a:	2f 93       	push	r18
 86c:	3f 93       	push	r19
 86e:	4f 93       	push	r20
 870:	5f 93       	push	r21
 872:	6f 93       	push	r22
 874:	7f 93       	push	r23
 876:	8f 93       	push	r24
 878:	9f 93       	push	r25
 87a:	af 93       	push	r26
 87c:	bf 93       	push	r27
 87e:	ef 93       	push	r30
 880:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
 882:	80 91 d6 01 	lds	r24, 0x01D6
 886:	90 91 d7 01 	lds	r25, 0x01D7
 88a:	89 2b       	or	r24, r25
 88c:	29 f0       	breq	.+10     	; 0x898 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
 88e:	e0 91 d6 01 	lds	r30, 0x01D6
 892:	f0 91 d7 01 	lds	r31, 0x01D7
 896:	09 95       	icall
}
 898:	ff 91       	pop	r31
 89a:	ef 91       	pop	r30
 89c:	bf 91       	pop	r27
 89e:	af 91       	pop	r26
 8a0:	9f 91       	pop	r25
 8a2:	8f 91       	pop	r24
 8a4:	7f 91       	pop	r23
 8a6:	6f 91       	pop	r22
 8a8:	5f 91       	pop	r21
 8aa:	4f 91       	pop	r20
 8ac:	3f 91       	pop	r19
 8ae:	2f 91       	pop	r18
 8b0:	0f 90       	pop	r0
 8b2:	0f be       	out	0x3f, r0	; 63
 8b4:	0f 90       	pop	r0
 8b6:	1f 90       	pop	r1
 8b8:	18 95       	reti

000008ba <__vector_2>:

ISR(INT1_vect) {
 8ba:	1f 92       	push	r1
 8bc:	0f 92       	push	r0
 8be:	0f b6       	in	r0, 0x3f	; 63
 8c0:	0f 92       	push	r0
 8c2:	11 24       	eor	r1, r1
 8c4:	2f 93       	push	r18
 8c6:	3f 93       	push	r19
 8c8:	4f 93       	push	r20
 8ca:	5f 93       	push	r21
 8cc:	6f 93       	push	r22
 8ce:	7f 93       	push	r23
 8d0:	8f 93       	push	r24
 8d2:	9f 93       	push	r25
 8d4:	af 93       	push	r26
 8d6:	bf 93       	push	r27
 8d8:	ef 93       	push	r30
 8da:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
 8dc:	80 91 d8 01 	lds	r24, 0x01D8
 8e0:	90 91 d9 01 	lds	r25, 0x01D9
 8e4:	89 2b       	or	r24, r25
 8e6:	29 f0       	breq	.+10     	; 0x8f2 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
 8e8:	e0 91 d8 01 	lds	r30, 0x01D8
 8ec:	f0 91 d9 01 	lds	r31, 0x01D9
 8f0:	09 95       	icall
}
 8f2:	ff 91       	pop	r31
 8f4:	ef 91       	pop	r30
 8f6:	bf 91       	pop	r27
 8f8:	af 91       	pop	r26
 8fa:	9f 91       	pop	r25
 8fc:	8f 91       	pop	r24
 8fe:	7f 91       	pop	r23
 900:	6f 91       	pop	r22
 902:	5f 91       	pop	r21
 904:	4f 91       	pop	r20
 906:	3f 91       	pop	r19
 908:	2f 91       	pop	r18
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 914:	1f 92       	push	r1
 916:	0f 92       	push	r0
 918:	0f b6       	in	r0, 0x3f	; 63
 91a:	0f 92       	push	r0
 91c:	11 24       	eor	r1, r1
 91e:	2f 93       	push	r18
 920:	3f 93       	push	r19
 922:	8f 93       	push	r24
 924:	9f 93       	push	r25
 926:	af 93       	push	r26
 928:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 92a:	80 91 db 01 	lds	r24, 0x01DB
 92e:	90 91 dc 01 	lds	r25, 0x01DC
 932:	a0 91 dd 01 	lds	r26, 0x01DD
 936:	b0 91 de 01 	lds	r27, 0x01DE
	unsigned char f = timer0_fract;
 93a:	30 91 da 01 	lds	r19, 0x01DA

	m += MILLIS_INC;
	f += FRACT_INC;
 93e:	23 e0       	ldi	r18, 0x03	; 3
 940:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 942:	2d 37       	cpi	r18, 0x7D	; 125
 944:	20 f4       	brcc	.+8      	; 0x94e <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 946:	01 96       	adiw	r24, 0x01	; 1
 948:	a1 1d       	adc	r26, r1
 94a:	b1 1d       	adc	r27, r1
 94c:	05 c0       	rjmp	.+10     	; 0x958 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 94e:	26 e8       	ldi	r18, 0x86	; 134
 950:	23 0f       	add	r18, r19
		m += 1;
 952:	02 96       	adiw	r24, 0x02	; 2
 954:	a1 1d       	adc	r26, r1
 956:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 958:	20 93 da 01 	sts	0x01DA, r18
	timer0_millis = m;
 95c:	80 93 db 01 	sts	0x01DB, r24
 960:	90 93 dc 01 	sts	0x01DC, r25
 964:	a0 93 dd 01 	sts	0x01DD, r26
 968:	b0 93 de 01 	sts	0x01DE, r27
	timer0_overflow_count++;
 96c:	80 91 df 01 	lds	r24, 0x01DF
 970:	90 91 e0 01 	lds	r25, 0x01E0
 974:	a0 91 e1 01 	lds	r26, 0x01E1
 978:	b0 91 e2 01 	lds	r27, 0x01E2
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	a1 1d       	adc	r26, r1
 980:	b1 1d       	adc	r27, r1
 982:	80 93 df 01 	sts	0x01DF, r24
 986:	90 93 e0 01 	sts	0x01E0, r25
 98a:	a0 93 e1 01 	sts	0x01E1, r26
 98e:	b0 93 e2 01 	sts	0x01E2, r27
}
 992:	bf 91       	pop	r27
 994:	af 91       	pop	r26
 996:	9f 91       	pop	r25
 998:	8f 91       	pop	r24
 99a:	3f 91       	pop	r19
 99c:	2f 91       	pop	r18
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 9a8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 9aa:	84 b5       	in	r24, 0x24	; 36
 9ac:	82 60       	ori	r24, 0x02	; 2
 9ae:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 9b0:	84 b5       	in	r24, 0x24	; 36
 9b2:	81 60       	ori	r24, 0x01	; 1
 9b4:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 9b6:	85 b5       	in	r24, 0x25	; 37
 9b8:	82 60       	ori	r24, 0x02	; 2
 9ba:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 9bc:	85 b5       	in	r24, 0x25	; 37
 9be:	81 60       	ori	r24, 0x01	; 1
 9c0:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 9c2:	ee e6       	ldi	r30, 0x6E	; 110
 9c4:	f0 e0       	ldi	r31, 0x00	; 0
 9c6:	80 81       	ld	r24, Z
 9c8:	81 60       	ori	r24, 0x01	; 1
 9ca:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 9cc:	e1 e8       	ldi	r30, 0x81	; 129
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 9d2:	80 81       	ld	r24, Z
 9d4:	82 60       	ori	r24, 0x02	; 2
 9d6:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 9d8:	80 81       	ld	r24, Z
 9da:	81 60       	ori	r24, 0x01	; 1
 9dc:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 9de:	e0 e8       	ldi	r30, 0x80	; 128
 9e0:	f0 e0       	ldi	r31, 0x00	; 0
 9e2:	80 81       	ld	r24, Z
 9e4:	81 60       	ori	r24, 0x01	; 1
 9e6:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 9e8:	e1 eb       	ldi	r30, 0xB1	; 177
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	80 81       	ld	r24, Z
 9ee:	84 60       	ori	r24, 0x04	; 4
 9f0:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 9f2:	e0 eb       	ldi	r30, 0xB0	; 176
 9f4:	f0 e0       	ldi	r31, 0x00	; 0
 9f6:	80 81       	ld	r24, Z
 9f8:	81 60       	ori	r24, 0x01	; 1
 9fa:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 9fc:	ea e7       	ldi	r30, 0x7A	; 122
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	84 60       	ori	r24, 0x04	; 4
 a04:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 a06:	80 81       	ld	r24, Z
 a08:	82 60       	ori	r24, 0x02	; 2
 a0a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 a0c:	80 81       	ld	r24, Z
 a0e:	81 60       	ori	r24, 0x01	; 1
 a10:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 a12:	80 81       	ld	r24, Z
 a14:	80 68       	ori	r24, 0x80	; 128
 a16:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 a18:	10 92 c1 00 	sts	0x00C1, r1
 a1c:	08 95       	ret

00000a1e <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 a1e:	83 30       	cpi	r24, 0x03	; 3
 a20:	69 f0       	breq	.+26     	; 0xa3c <turnOffPWM+0x1e>
 a22:	28 f4       	brcc	.+10     	; 0xa2e <turnOffPWM+0x10>
 a24:	81 30       	cpi	r24, 0x01	; 1
 a26:	b1 f0       	breq	.+44     	; 0xa54 <turnOffPWM+0x36>
 a28:	82 30       	cpi	r24, 0x02	; 2
 a2a:	c1 f0       	breq	.+48     	; 0xa5c <turnOffPWM+0x3e>
 a2c:	08 95       	ret
 a2e:	87 30       	cpi	r24, 0x07	; 7
 a30:	c9 f0       	breq	.+50     	; 0xa64 <turnOffPWM+0x46>
 a32:	88 30       	cpi	r24, 0x08	; 8
 a34:	e9 f0       	breq	.+58     	; 0xa70 <turnOffPWM+0x52>
 a36:	84 30       	cpi	r24, 0x04	; 4
 a38:	01 f5       	brne	.+64     	; 0xa7a <turnOffPWM+0x5c>
 a3a:	06 c0       	rjmp	.+12     	; 0xa48 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 a3c:	e0 e8       	ldi	r30, 0x80	; 128
 a3e:	f0 e0       	ldi	r31, 0x00	; 0
 a40:	80 81       	ld	r24, Z
 a42:	8f 77       	andi	r24, 0x7F	; 127
 a44:	80 83       	st	Z, r24
 a46:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 a48:	e0 e8       	ldi	r30, 0x80	; 128
 a4a:	f0 e0       	ldi	r31, 0x00	; 0
 a4c:	80 81       	ld	r24, Z
 a4e:	8f 7d       	andi	r24, 0xDF	; 223
 a50:	80 83       	st	Z, r24
 a52:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 a54:	84 b5       	in	r24, 0x24	; 36
 a56:	8f 77       	andi	r24, 0x7F	; 127
 a58:	84 bd       	out	0x24, r24	; 36
 a5a:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 a5c:	84 b5       	in	r24, 0x24	; 36
 a5e:	8f 7d       	andi	r24, 0xDF	; 223
 a60:	84 bd       	out	0x24, r24	; 36
 a62:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 a64:	e0 eb       	ldi	r30, 0xB0	; 176
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	80 81       	ld	r24, Z
 a6a:	8f 77       	andi	r24, 0x7F	; 127
 a6c:	80 83       	st	Z, r24
 a6e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 a70:	e0 eb       	ldi	r30, 0xB0	; 176
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	80 81       	ld	r24, Z
 a76:	8f 7d       	andi	r24, 0xDF	; 223
 a78:	80 83       	st	Z, r24
 a7a:	08 95       	ret

00000a7c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 a7c:	1f 93       	push	r17
 a7e:	cf 93       	push	r28
 a80:	df 93       	push	r29
 a82:	c6 2f       	mov	r28, r22
	uint8_t timer = digitalPinToTimer(pin);
 a84:	28 2f       	mov	r18, r24
 a86:	30 e0       	ldi	r19, 0x00	; 0
 a88:	f9 01       	movw	r30, r18
 a8a:	e7 59       	subi	r30, 0x97	; 151
 a8c:	ff 4f       	sbci	r31, 0xFF	; 255
 a8e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 a90:	f9 01       	movw	r30, r18
 a92:	e3 58       	subi	r30, 0x83	; 131
 a94:	ff 4f       	sbci	r31, 0xFF	; 255
 a96:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
 a98:	f9 01       	movw	r30, r18
 a9a:	ef 56       	subi	r30, 0x6F	; 111
 a9c:	ff 4f       	sbci	r31, 0xFF	; 255
 a9e:	d4 91       	lpm	r29, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 aa0:	dd 23       	and	r29, r29
 aa2:	c9 f0       	breq	.+50     	; 0xad6 <digitalWrite+0x5a>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 aa4:	81 11       	cpse	r24, r1
 aa6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <turnOffPWM>

	out = portOutputRegister(port);
 aaa:	2d 2f       	mov	r18, r29
 aac:	30 e0       	ldi	r19, 0x00	; 0
 aae:	f9 01       	movw	r30, r18
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	eb 55       	subi	r30, 0x5B	; 91
 ab6:	ff 4f       	sbci	r31, 0xFF	; 255
 ab8:	a5 91       	lpm	r26, Z+
 aba:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 abc:	8f b7       	in	r24, 0x3f	; 63
	cli();
 abe:	f8 94       	cli

	if (val == LOW) {
 ac0:	c1 11       	cpse	r28, r1
 ac2:	05 c0       	rjmp	.+10     	; 0xace <digitalWrite+0x52>
		*out &= ~bit;
 ac4:	ec 91       	ld	r30, X
 ac6:	10 95       	com	r17
 ac8:	1e 23       	and	r17, r30
 aca:	1c 93       	st	X, r17
 acc:	03 c0       	rjmp	.+6      	; 0xad4 <digitalWrite+0x58>
	} else {
		*out |= bit;
 ace:	ec 91       	ld	r30, X
 ad0:	1e 2b       	or	r17, r30
 ad2:	1c 93       	st	X, r17
	}

	SREG = oldSREG;
 ad4:	8f bf       	out	0x3f, r24	; 63
}
 ad6:	df 91       	pop	r29
 ad8:	cf 91       	pop	r28
 ada:	1f 91       	pop	r17
 adc:	08 95       	ret

00000ade <_Z8task20msv>:
*
* Implementation of function that handle the 20ms requests
* @return void
* @note Void function with no return.
*/
void task20ms(void) {
 ade:	08 95       	ret

00000ae0 <_Z8task40msv>:
*
* Implementation of function that handle the 40ms requests
* @return void
* @note Void function with no return.
*/
void task40ms(void) {
 ae0:	08 95       	ret

00000ae2 <_Z8task60msv>:
*
* Implementation of function that handle the 60ms requests
* @return void
* @note Void function with no return.
*/
void task60ms(void) {
 ae2:	08 95       	ret

00000ae4 <_Z10task1000msv>:
*
* Implementation of function that handle the 1000ms requests
* @return void
* @note Void function with no return.
*/
void task1000ms(void) {
 ae4:	08 95       	ret

00000ae6 <loop>:
void loop()
{	
	
	
	// if 20ms have passed
	if(taskTimeCounterFlag_u8==1) {
 ae6:	80 91 e8 01 	lds	r24, 0x01E8
 aea:	81 30       	cpi	r24, 0x01	; 1
 aec:	59 f5       	brne	.+86     	; 0xb44 <loop+0x5e>
		for(stui_TaskIndex=0; stui_TaskIndex < cui_numberOfTasks; stui_TaskIndex++) {
 aee:	10 92 e9 01 	sts	0x01E9, r1
 af2:	80 91 e6 01 	lds	r24, 0x01E6
 af6:	88 23       	and	r24, r24
 af8:	19 f1       	breq	.+70     	; 0xb40 <loop+0x5a>
 afa:	80 e0       	ldi	r24, 0x00	; 0
			if((taskTimeCounter_u8 % taskPtr[stui_TaskIndex].interval_u16) == 0 ) {
 afc:	90 91 e7 01 	lds	r25, 0x01E7
 b00:	e0 91 e4 01 	lds	r30, 0x01E4
 b04:	f0 91 e5 01 	lds	r31, 0x01E5
 b08:	24 e0       	ldi	r18, 0x04	; 4
 b0a:	82 9f       	mul	r24, r18
 b0c:	e0 0d       	add	r30, r0
 b0e:	f1 1d       	adc	r31, r1
 b10:	11 24       	eor	r1, r1
 b12:	89 2f       	mov	r24, r25
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	60 81       	ld	r22, Z
 b18:	71 81       	ldd	r23, Z+1	; 0x01
 b1a:	0e 94 24 06 	call	0xc48	; 0xc48 <__udivmodhi4>
 b1e:	89 2b       	or	r24, r25
 b20:	31 f4       	brne	.+12     	; 0xb2e <loop+0x48>
			
				if((taskPtr[stui_TaskIndex].ptrFunc) != NULL) {
 b22:	02 80       	ldd	r0, Z+2	; 0x02
 b24:	f3 81       	ldd	r31, Z+3	; 0x03
 b26:	e0 2d       	mov	r30, r0
 b28:	30 97       	sbiw	r30, 0x00	; 0
 b2a:	09 f0       	breq	.+2      	; 0xb2e <loop+0x48>
					(*taskPtr[stui_TaskIndex].ptrFunc)();	
 b2c:	09 95       	icall
{	
	
	
	// if 20ms have passed
	if(taskTimeCounterFlag_u8==1) {
		for(stui_TaskIndex=0; stui_TaskIndex < cui_numberOfTasks; stui_TaskIndex++) {
 b2e:	80 91 e9 01 	lds	r24, 0x01E9
 b32:	8f 5f       	subi	r24, 0xFF	; 255
 b34:	80 93 e9 01 	sts	0x01E9, r24
 b38:	90 91 e6 01 	lds	r25, 0x01E6
 b3c:	89 17       	cp	r24, r25
 b3e:	f0 f2       	brcs	.-68     	; 0xafc <loop+0x16>
					// do nothing
				}
			}
		
		}
		taskTimeCounterFlag_u8 = 0;
 b40:	10 92 e8 01 	sts	0x01E8, r1
 b44:	08 95       	ret

00000b46 <_Z11timer0_initv>:
 * @return void
 *  
 */
void timer0_init() 
{
	DDRD=(1<<PORTD6);/**< digital pin6 is an output for lowbeam*/
 b46:	80 e4       	ldi	r24, 0x40	; 64
 b48:	8a b9       	out	0x0a, r24	; 10
	TCCR0A=(1<<COM0A1);		/**<Clear OC0A on Compare Match */
 b4a:	80 e8       	ldi	r24, 0x80	; 128
 b4c:	84 bd       	out	0x24, r24	; 36
	TIMSK0=(1<<TOIE0);		/**<enable interrupt on compare */
 b4e:	81 e0       	ldi	r24, 0x01	; 1
 b50:	80 93 6e 00 	sts	0x006E, r24
	sei();
 b54:	78 94       	sei
	TCCR0B=(1<<CS02)|(1<<CS00); /**< sets the prescaler to 1024;*/
 b56:	85 e0       	ldi	r24, 0x05	; 5
 b58:	85 bd       	out	0x25, r24	; 37
 b5a:	08 95       	ret

00000b5c <_Z11timer1_initv>:
 *  
 */
void timer1_init() {
	
	// initialize Timer1
	cli();             // disable global interrupts
 b5c:	f8 94       	cli
	TCCR1A = 0;        // set entire TCCR1A register to 0
 b5e:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0;
 b62:	e1 e8       	ldi	r30, 0x81	; 129
 b64:	f0 e0       	ldi	r31, 0x00	; 0
 b66:	10 82       	st	Z, r1
	
	// initialize counter
	TCNT1 = T_TIMER_START;
 b68:	8e e1       	ldi	r24, 0x1E	; 30
 b6a:	9b ef       	ldi	r25, 0xFB	; 251
 b6c:	90 93 85 00 	sts	0x0085, r25
 b70:	80 93 84 00 	sts	0x0084, r24
	
	// enable Timer1 overflow interrupt:
	TIMSK1 = (1 << TOIE1);
 b74:	81 e0       	ldi	r24, 0x01	; 1
 b76:	80 93 6f 00 	sts	0x006F, r24
	// set the timer with a prescaller of 256
	TCCR1B |= (1 << CS12);
 b7a:	80 81       	ld	r24, Z
 b7c:	84 60       	ori	r24, 0x04	; 4
 b7e:	80 83       	st	Z, r24
	// enable global interrupts:
	sei();
 b80:	78 94       	sei
 b82:	08 95       	ret

00000b84 <setup>:



void setup()
{
	taskTimeCounterFlag_u8 = 0;
 b84:	10 92 e8 01 	sts	0x01E8, r1
	taskTimeCounter_u8 = 0;	
 b88:	10 92 e7 01 	sts	0x01E7, r1
	stui_TaskIndex = 0;				
 b8c:	10 92 e9 01 	sts	0x01E9, r1
	taskPtr = taskGetConfigPtr();		
 b90:	81 e0       	ldi	r24, 0x01	; 1
 b92:	91 e0       	ldi	r25, 0x01	; 1
 b94:	90 93 e5 01 	sts	0x01E5, r25
 b98:	80 93 e4 01 	sts	0x01E4, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 b9c:	26 e0       	ldi	r18, 0x06	; 6
 b9e:	40 e0       	ldi	r20, 0x00	; 0
 ba0:	52 ec       	ldi	r21, 0xC2	; 194
 ba2:	61 e0       	ldi	r22, 0x01	; 1
 ba4:	70 e0       	ldi	r23, 0x00	; 0
 ba6:	8c e2       	ldi	r24, 0x2C	; 44
 ba8:	91 e0       	ldi	r25, 0x01	; 1
 baa:	0e 94 4a 01 	call	0x294	; 0x294 <_ZN14HardwareSerial5beginEmh>
	#ifdef ENABLE_DEBUG
		Serial.begin(115200);
		//Serial.println("Serial Debug has started");
	#endif				
	timer0_init();	
 bae:	0e 94 a3 05 	call	0xb46	; 0xb46 <_Z11timer0_initv>
	timer1_init();	
 bb2:	0e 94 ae 05 	call	0xb5c	; 0xb5c <_Z11timer1_initv>
 bb6:	08 95       	ret

00000bb8 <__vector_13>:
 * 
 * Implementation of the function that handle timer1 overflow ISR
 * @return void
 *  
 */
ISR(TIMER1_OVF_vect) {
 bb8:	1f 92       	push	r1
 bba:	0f 92       	push	r0
 bbc:	0f b6       	in	r0, 0x3f	; 63
 bbe:	0f 92       	push	r0
 bc0:	11 24       	eor	r1, r1
 bc2:	8f 93       	push	r24
 bc4:	9f 93       	push	r25
	TCNT1 = T_TIMER_START;
 bc6:	8e e1       	ldi	r24, 0x1E	; 30
 bc8:	9b ef       	ldi	r25, 0xFB	; 251
 bca:	90 93 85 00 	sts	0x0085, r25
 bce:	80 93 84 00 	sts	0x0084, r24
	taskTimeCounterFlag_u8 = 1;
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	80 93 e8 01 	sts	0x01E8, r24
	taskTimeCounter_u8++;
 bd8:	80 91 e7 01 	lds	r24, 0x01E7
 bdc:	8f 5f       	subi	r24, 0xFF	; 255
 bde:	80 93 e7 01 	sts	0x01E7, r24
}
 be2:	9f 91       	pop	r25
 be4:	8f 91       	pop	r24
 be6:	0f 90       	pop	r0
 be8:	0f be       	out	0x3f, r0	; 63
 bea:	0f 90       	pop	r0
 bec:	1f 90       	pop	r1
 bee:	18 95       	reti

00000bf0 <_GLOBAL__sub_I_debugBuffer_au8>:


uint8_t stui_TaskIndex;
volatile uint8_t taskTimeCounterFlag_u8;
volatile uint8_t taskTimeCounter_u8;
const uint8_t cui_numberOfTasks = getNrTasks();
 bf0:	85 e0       	ldi	r24, 0x05	; 5
 bf2:	80 93 e6 01 	sts	0x01E6, r24
 bf6:	08 95       	ret

00000bf8 <_Z22processSerialDebugDatav>:
 *  
 */	
void processSerialDebugData()
{
	 uint8_t data_lu8;
	 if (debugArrIndex_u8)
 bf8:	80 91 ea 01 	lds	r24, 0x01EA
 bfc:	88 23       	and	r24, r24
 bfe:	01 f1       	breq	.+64     	; 0xc40 <_Z22processSerialDebugDatav+0x48>
	 {
		 if (Serial.availableForWrite()>=1)
 c00:	8c e2       	ldi	r24, 0x2C	; 44
 c02:	91 e0       	ldi	r25, 0x01	; 1
 c04:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN14HardwareSerial17availableForWriteEv>
 c08:	18 16       	cp	r1, r24
 c0a:	19 06       	cpc	r1, r25
 c0c:	84 f4       	brge	.+32     	; 0xc2e <_Z22processSerialDebugDatav+0x36>
		 {
		
			 data_lu8 = debugBuffer_au8[debugArrIndex_u8];
 c0e:	e0 91 ea 01 	lds	r30, 0x01EA
 c12:	f0 e0       	ldi	r31, 0x00	; 0
 c14:	e5 51       	subi	r30, 0x15	; 21
 c16:	fe 4f       	sbci	r31, 0xFE	; 254
			 Serial.write(data_lu8);
 c18:	60 81       	ld	r22, Z
 c1a:	8c e2       	ldi	r24, 0x2C	; 44
 c1c:	91 e0       	ldi	r25, 0x01	; 1
 c1e:	0e 94 06 01 	call	0x20c	; 0x20c <_ZN14HardwareSerial5writeEh>
			 debugArrIndex_u8--;
 c22:	80 91 ea 01 	lds	r24, 0x01EA
 c26:	81 50       	subi	r24, 0x01	; 1
 c28:	80 93 ea 01 	sts	0x01EA, r24
 c2c:	08 95       	ret
		 }
		 else
		 {
			  static uint8_t flag=0;
			  flag=1-flag;
 c2e:	80 91 e3 01 	lds	r24, 0x01E3
 c32:	61 e0       	ldi	r22, 0x01	; 1
 c34:	68 1b       	sub	r22, r24
 c36:	60 93 e3 01 	sts	0x01E3, r22
			  digitalWrite(6,flag);
 c3a:	86 e0       	ldi	r24, 0x06	; 6
 c3c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <digitalWrite>
 c40:	08 95       	ret

00000c42 <_Z9task100msv>:
* Implementation of function that handle the 100ms requests
* @return void
* @note Void function with no return.
*/
void task100ms(void) {
	processSerialDebugData();
 c42:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <_Z22processSerialDebugDatav>
 c46:	08 95       	ret

00000c48 <__udivmodhi4>:
 c48:	aa 1b       	sub	r26, r26
 c4a:	bb 1b       	sub	r27, r27
 c4c:	51 e1       	ldi	r21, 0x11	; 17
 c4e:	07 c0       	rjmp	.+14     	; 0xc5e <__udivmodhi4_ep>

00000c50 <__udivmodhi4_loop>:
 c50:	aa 1f       	adc	r26, r26
 c52:	bb 1f       	adc	r27, r27
 c54:	a6 17       	cp	r26, r22
 c56:	b7 07       	cpc	r27, r23
 c58:	10 f0       	brcs	.+4      	; 0xc5e <__udivmodhi4_ep>
 c5a:	a6 1b       	sub	r26, r22
 c5c:	b7 0b       	sbc	r27, r23

00000c5e <__udivmodhi4_ep>:
 c5e:	88 1f       	adc	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	5a 95       	dec	r21
 c64:	a9 f7       	brne	.-22     	; 0xc50 <__udivmodhi4_loop>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	bc 01       	movw	r22, r24
 c6c:	cd 01       	movw	r24, r26
 c6e:	08 95       	ret

00000c70 <__udivmodsi4>:
 c70:	a1 e2       	ldi	r26, 0x21	; 33
 c72:	1a 2e       	mov	r1, r26
 c74:	aa 1b       	sub	r26, r26
 c76:	bb 1b       	sub	r27, r27
 c78:	fd 01       	movw	r30, r26
 c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__udivmodsi4_ep>

00000c7c <__udivmodsi4_loop>:
 c7c:	aa 1f       	adc	r26, r26
 c7e:	bb 1f       	adc	r27, r27
 c80:	ee 1f       	adc	r30, r30
 c82:	ff 1f       	adc	r31, r31
 c84:	a2 17       	cp	r26, r18
 c86:	b3 07       	cpc	r27, r19
 c88:	e4 07       	cpc	r30, r20
 c8a:	f5 07       	cpc	r31, r21
 c8c:	20 f0       	brcs	.+8      	; 0xc96 <__udivmodsi4_ep>
 c8e:	a2 1b       	sub	r26, r18
 c90:	b3 0b       	sbc	r27, r19
 c92:	e4 0b       	sbc	r30, r20
 c94:	f5 0b       	sbc	r31, r21

00000c96 <__udivmodsi4_ep>:
 c96:	66 1f       	adc	r22, r22
 c98:	77 1f       	adc	r23, r23
 c9a:	88 1f       	adc	r24, r24
 c9c:	99 1f       	adc	r25, r25
 c9e:	1a 94       	dec	r1
 ca0:	69 f7       	brne	.-38     	; 0xc7c <__udivmodsi4_loop>
 ca2:	60 95       	com	r22
 ca4:	70 95       	com	r23
 ca6:	80 95       	com	r24
 ca8:	90 95       	com	r25
 caa:	9b 01       	movw	r18, r22
 cac:	ac 01       	movw	r20, r24
 cae:	bd 01       	movw	r22, r26
 cb0:	cf 01       	movw	r24, r30
 cb2:	08 95       	ret

00000cb4 <__tablejump2__>:
 cb4:	ee 0f       	add	r30, r30
 cb6:	ff 1f       	adc	r31, r31

00000cb8 <__tablejump__>:
 cb8:	05 90       	lpm	r0, Z+
 cba:	f4 91       	lpm	r31, Z
 cbc:	e0 2d       	mov	r30, r0
 cbe:	09 94       	ijmp

00000cc0 <_exit>:
 cc0:	f8 94       	cli

00000cc2 <__stop_program>:
 cc2:	ff cf       	rjmp	.-2      	; 0xcc2 <__stop_program>
